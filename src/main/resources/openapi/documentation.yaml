openapi: "3.0.3"
info:
  title: "Collect_Invest_API_Service API"
  description: "Collect_Invest_API_Service API"
  version: "1.0.0"
servers:
- url: "http://localhost:1111"
paths:
  /collectibleService/buy:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/BuySellRequest"
        required: true
      responses:
        "200":
          description: ""
          content:
            '*/*':
              schema:
                type: "string"
  /collectibleService/getAllCollectibles:
    get:
      description: ""
      responses:
        "200":
          description: ""
          content:
            '*/*':
              schema:
                type: "string"
  /collectibleService/getCollectible/{id}:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: ""
          content:
            '*/*':
              schema:
                type: "string"
  /collectibleService/sell:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/BuySellRequest"
        required: true
      responses:
        "200":
          description: ""
          content:
            '*/*':
              schema:
                type: "string"
  /financialService/getWallet/{userId}:
    get:
      description: "post(\"/buy/{userId}/{amount}\") { <br> val userId: Long = call.parameters[\"\
        userId\"]!!.toLong() <br> val amount: Double = call.parameters[\"amount\"\
        ]!!.toDouble() <br> val client = HttpClientSingleton.client <br> val response:\
        \ HttpResponse = client.post(\"$financialUrl/buy/$userId/$amount\") <br> when\
        \ (response.status) { <br> HttpStatusCode.OK -> { <br> call.respond(HttpStatusCode.OK,\
        \ response.body<Status>()) <br> } <br> else -> { <br> call.respondText( <br>\
        \ text = Json.encodeToString(Message(\"error while connecting to financial\
        \ service\")), <br> contentType = ContentType.Application.Json, <br> status\
        \ = HttpStatusCode.ServiceUnavailable <br> ) <br> } <br> } <br> } <br> post(\"\
        /sell/{userId}/{amount}\") { <br> val userId: Long = call.parameters[\"userId\"\
        ]!!.toLong() <br> val amount: Double = call.parameters[\"amount\"]!!.toDouble()\
        \ <br> val client = HttpClientSingleton.client <br> val response: HttpResponse\
        \ = client.post(\"$financialUrl/sell/$userId/$amount\") <br> when (response.status)\
        \ { <br> HttpStatusCode.OK -> { <br> call.respond(HttpStatusCode.OK, response.body<Status>())\
        \ <br> } <br> else -> { <br> call.respondText( <br> text = Json.encodeToString(Message(\"\
        error while connecting to financial service\")), <br> contentType = ContentType.Application.Json,\
        \ <br> status = HttpStatusCode.ServiceUnavailable <br> ) <br> } <br> } <br>\
        \ }"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Wallet"
        "503":
          description: "Service Unavailable"
          content:
            application/json:
              schema:
                type: "string"
  /financialService/topUp/{userId}/{amount}:
    put:
      description: ""
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "amount"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: "string"
  /userService/logIn/{email}/{password}:
    get:
      description: ""
      parameters:
      - name: "email"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "password"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthenticatedUser"
        "503":
          description: "Service Unavailable"
          content:
            application/json:
              schema:
                type: "string"
  /userService/signUp:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthenticatedUser"
        "503":
          description: "Service Unavailable"
          content:
            application/json:
              schema:
                type: "string"
components:
  schemas:
    BuySellRequest:
      type: "object"
      properties:
        collectibleId:
          type: "integer"
          format: "int64"
        userId:
          type: "integer"
          format: "int64"
        shares:
          type: "integer"
          format: "int32"
    CollectibleItem:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        description:
          type: "string"
        category:
          type: "string"
        photoUrl:
          type: "string"
        currentPrice:
          type: "number"
          format: "double"
        availableShares:
          type: "integer"
          format: "int32"
      required:
      - "name"
      - "description"
      - "category"
      - "photoUrl"
    Wallet:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        userId:
          type: "integer"
          format: "int64"
        balance:
          type: "number"
          format: "double"
        status:
          type: "string"
      required:
      - "status"
    AuthenticatedUser:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
      required:
      - "name"
    User:
      type: "object"
      properties:
        name:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
      required:
      - "name"
      - "email"
      - "password"